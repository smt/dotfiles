""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""" FUNCTIONS """"""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! Indenting(indent, what, cols)
  let spccol = repeat(' ', a:cols)
  let result = substitute(a:indent, spccol, '\t', 'g')
  let result = substitute(result, ' \+\ze\t', '', 'g')
  if a:what == 1
    let result = substitute(result, '\t', spccol, 'g')
  endif
  return result
endfunction

function! IndentConvert(line1, line2, what, cols)
  let savepos = getpos('.')
  let cols = empty(a:cols) ? &tabstop : a:cols
  execute a:line1 . ',' . a:line2 . 's/^\s\+/\=Indenting(submatch(0), a:what, cols)/e'
  call histdel('search', -1)
  call setpos('.', savepos)
endfunction

silent function! OSX()
  return has('macunix')
endfunction

silent function! LINUX()
  return has('unix') && !has('macunix') && !has('win32unix')
endfunction

silent function! WINDOWS()
  return  (has('win16') || has('win32') || has('win64'))
endfunction

function! InitializeDirectories()
  let parent = $HOME
  let prefix = 'vim'
  let dir_list = {
        \ 'backup': 'backupdir',
        \ 'views': 'viewdir',
        \ 'swap': 'directory' }

  if has('persistent_undo')
    let dir_list['undo'] = 'undodir'
  endif

  let common_dir = parent . '/.' . prefix

  for [dirname, settingname] in items(dir_list)
    let directory = common_dir . dirname . '/'
    if exists("*mkdir")
      if !isdirectory(directory)
        call mkdir(directory)
      endif
    endif
    if !isdirectory(directory)
      echo "Warning: Unable to create backup directory: " . directory
      echo "Try: mkdir -p " . directory
    else
      let directory = substitute(directory, " ", "\\\\ ", "g")
      exec "set " . settingname . "=" . directory
    endif
  endfor
endfunction

function! StripTrailingWhitespace()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " do the business:
  %s/\s\+$//e
  " clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

function! JavaScriptFold()
  setlocal foldmethod=syntax
  setlocal foldlevelstart=1
  syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

  function! FoldText()
    return substitute(getline(v:foldstart), '{.*', '{...}', '')
  endfunction

  setlocal foldtext=FoldText()
endfunction

function! s:RunShellCommand(cmdline)
  botright new

  setlocal buftype=nofile
  setlocal bufhidden=delete
  setlocal nobuflisted
  setlocal noswapfile
  setlocal nowrap
  setlocal filetype=shell
  setlocal syntax=shell

  call setline(1, a:cmdline)
  call setline(2, substitute(a:cmdline, '.', '=', 'g'))
  execute 'silent $read !' . escape(a:cmdline, '%#')
  setlocal nomodifiable
endfunction

function! g:FixTabStops()
  set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab
endfunction

function! HighlightRepeats() range
  let lineCounts = {}
  let lineNum = a:firstline
  while lineNum <= a:lastline
    let lineText = getline(lineNum)
    if lineText != ""
      let lineCounts[lineText] = (has_key(lineCounts, lineText) ? lineCounts[lineText] : 0) + 1
    endif
    let lineNum = lineNum + 1
  endwhile
  exe 'syn clear Repeat'
  for lineText in keys(lineCounts)
    if lineCounts[lineText] >= 2
      exe 'syn match Repeat "^' . escape(lineText, '".\^$*[]') . '$"'
    endif
  endfor
endfunction

function! WordProcessorMode()
  setlocal spell spelllang=en_us
  setlocal thesaurus+=~/.dotfiles/vim/thesaurus/mthesaur.txt
  setlocal complete+=s
  if has("gui_running")
    setlocal lines=999
    setlocal columns=60
  endif
  setlocal colorcolumn=0
  setlocal textwidth=60
  setlocal nolist
  setlocal formatoptions=l1
  setlocal wrap
  setlocal linebreak
  setlocal nonumber
  setlocal norelativenumber
  setf writing
endfunction

function! AgHandler(l)
  let keys = split(a:l,':')
  execute 'tabe +' . keys[-2] . ' ' . escape(keys[-1], ' ')
endfunction

function! Arghandler(l)
  return "ag -i " . a:l . " | sed 's@\\(.[^:]*\\):\\(.[^:]*\\):\\(.*\\)@\\3:\\2:\\1@' "
endfunction

function! Lister()
  call extend(g:FZF_Cmd_Completion_Pre_List,split(getcmdline(),'\(\\\zs\)\@<!\& '))
endfunction

function! CmdLineDirComplete(prefix, options, rawdir)
  let l:dirprefix = matchstr(a:rawdir,"^.*/")
  if isdirectory(expand(l:dirprefix))
    return join(a:prefix + map(fzf#run({
          \'options': a:options . ' --select-1  --query=' .
          \ a:rawdir[matchend(a:rawdir,"^.*/"):len(a:rawdir)],
          \'dir': expand(l:dirprefix)
          \}),
          \'"' . escape(l:dirprefix, " ") . '" . escape(v:val, " ")'))
  else
    return join(a:prefix + map(fzf#run({
          \'options': a:options . ' --query='. a:rawdir }),
          \'escape(v:val, " ")'))
    "dropped --select-1 to speed things up on a long query
endfunction

function! GetCompletions()
  let g:FZF_Cmd_Completion_Pre_List = []
  let l:cmdline_list = split(getcmdline(), '\(\\\zs\)\@<!\& ', 1)
  let l:Prefix = l:cmdline_list[0:-2]
  execute "silent normal! :" . getcmdline() . "\<c-a>\<c-\>eLister()\<cr>\<c-c>"
  let l:FZF_Cmd_Completion_List = g:FZF_Cmd_Completion_Pre_List[len(l:Prefix):-1]
  unlet g:FZF_Cmd_Completion_Pre_List
  if len(l:Prefix) > 0 && l:Prefix[0] =~
        \ '^ed\=i\=t\=$\|^spl\=i\=t\=$\|^tabed\=i\=t\=$\|^arged\=i\=t\=$\|^vsp\=l\=i\=t\=$'
    "single-argument file commands
    return CmdLineDirComplete(l:Prefix, "",l:cmdline_list[-1])
  elseif len(l:Prefix) > 0 && l:Prefix[0] =~
        \ '^arg\=s\=$\|^ne\=x\=t\=$\|^sne\=x\=t\=$\|^argad\=d\=$'
    "multi-argument file commands
    return CmdLineDirComplete(l:Prefix, '--multi', l:cmdline_list[-1])
  else
    return join(l:Prefix + fzf#run({
          \'source':l:FZF_Cmd_Completion_List,
          \'options': '--select-1 --query='.shellescape(l:cmdline_list[-1])
          \}))
  endif
endfunction

function! MyPandocOpen(file)
  return 'open -a "Marked 2"'. a:file
endfunction

function! LightLineModified()
  return &ft =~ 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler' && &readonly ? 'RO' : ''
endfunction

function! LightLineFilename()
  let fname = expand('%:t')
  let rel_fname = expand('%')
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ fname == '__Tagbar__' ? rel_fname :
        \ fname =~ 'undotree\|diffpanel\|NERD_tree' ? '' :
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != rel_fname ? rel_fname : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname =~ 'undotree' ? 'UndoTree' :
        \ fname =~ 'diffpanel' ? 'UndoTree Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  " return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
  " return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! LightLineFugitive()
  if expand('%:t') !~? 'Tagbar\|undotree\|diffpanel\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
    let mark = ''  " edit here for cool mark
    let _ = fugitive#head()
    return strlen(_) ? mark._ : ''
  endif
  return ''
endfunction

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

function! SelectHTML()
  let n = 1
  while n < 50 && n <= line("$")
    " check for jinja
    " if getline(n) =~ '{{.*}}\|{%-\?\s*\(end.*\|extends\|block\|macro\|set\|if\|for\|include\|trans\)\>'
    if getline(n) =~ '{%-\?\s*\(end.*\|extends\|block\|macro\|set\|if\|for\|include\|trans\)\>'
      set ft=html.jinja
      return
    endif
    let n = n + 1
  endwhile
endfunction

if has("user_commands")
  command! -bang -nargs=* -complete=file E e<bang> <args>
  command! -bang -nargs=* -complete=file W w<bang> <args>
  command! -bang -nargs=* -complete=file Wq wq<bang> <args>
  command! -bang -nargs=* -complete=file WQ wq<bang> <args>
  command! -bang Wa wa<bang>
  command! -bang WA wa<bang>
  command! -bang Q q<bang>
  command! -bang QA qa<bang>
  command! -bang Qa qa<bang>

  command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)
  command! -nargs=? -range=% Space2Tab call IndentConvert(<line1>,<line2>,0,<q-args>)
  command! -nargs=? -range=% Tab2Space call IndentConvert(<line1>,<line2>,1,<q-args>)
  command! -nargs=? -range=% RetabIndent call IndentConvert(<line1>,<line2>,&et,<q-args>)
  command! -range=% -nargs=0 Space2Tab execute '<line1>,<line2>s#^\( \{'.&ts.'\}\)\+#\=repeat("\t", len(submatch(0))/' . &ts . ')'
  command! -range=% HighlightRepeats <line1>,<line2>call HighlightRepeats()
endif

call InitializeDirectories()

" vim: set sw=2 ts=2 sts=2 et tw=78 nospell:
