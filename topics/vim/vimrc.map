""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""" MAPPINGS """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" map
map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_
map <C-L> <C-W>l<C-W>_
map <C-H> <C-W>h<C-W>_
map <S-H> gT
map <S-L> gt
map <Leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>
map [F $
map [H g0
map <Leader>ew :e %%
map <Leader>es :sp %%
map <Leader>ev :vsp %%
"map <Leader>et :tabe %%
map <Leader>= <C-w>=
map <Leader>W :call WordProcessorMode()<CR>
map <Leader>tt :TagbarToggle<CR>
map zl zL
map zh zH
"map <silent> <F11> :call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")<CR>
map <F1> <Esc>
map <up> <C-W>k<C-W>_
map <down> <C-W>j<C-W>_
map <left> <C-W>h<C-W>_
map <right> <C-W>l<C-W>_
map  <Esc>[; <C-Semicolon>
map! <Esc>[; <C-Semicolon>

" vmap
vmap <C-Up> xkP`[V`]
vmap <C-Down> xp`[V`]

" imap
imap [F $
imap [H g0
imap <F1> <Esc>
imap <C-Semicolon> <Plug>(neosnippet_expand_or_jump)
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? "\<C-n>" : "\<TAB>"

" noremap
noremap j gj
noremap k gk

" inoremap
inoremap jk <Esc>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y> neocomplete#close_popup()
inoremap <expr><C-e> neocomplete#cancel_popup()
inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"
" Conflicts with Pencil:
"inoremap <C-U> <C-G>u<C-U>

" nnoremap
nnoremap Y y$
nnoremap <silent> <Leader><Space> :FZF<CR>
nnoremap <silent> <Leader><CR> :FZFBuffers<CR>
nnoremap <silent> <Leader>C :FZFColors<CR>
nnoremap <silent> <Leader>s :Ag!<CR>
nnoremap <Leader>G :Goyo<CR>
nnoremap <silent> <Leader>gs :Gstatus<CR>
nnoremap <silent> <Leader>gd :Gdiff<CR>
nnoremap <silent> <Leader>gc :Gcommit<CR>
nnoremap <silent> <Leader>gb :Gblame<CR>
nnoremap <silent> <Leader>gl :Glog<CR>
nnoremap <silent> <Leader>gp :Git push<CR>
nnoremap <silent> <Leader>gr :Gread<CR>
nnoremap <silent> <Leader>gw :Gwrite<CR>
nnoremap <silent> <Leader>ge :Gedit<CR>
nnoremap <silent> <Leader>gi :Git add -p %<CR>
nnoremap <silent> <Leader>gg :QuickfixsignsToggle<CR>
nnoremap <Leader>tf :call g:FixTabStops()<CR>
nnoremap <Leader>gu :GundoToggle<CR>
nnoremap <S-Left> :SidewaysLeft<cr>
nnoremap <S-Right> :SidewaysRight<cr>
" nnoremap <C-Up> ddkP
" nnoremap <C-Down> ddp
nnoremap gV `[v`]
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
nnoremap <space> za

" vnoremap
vnoremap < <gv
vnoremap > >gv
vnoremap . :normal .<CR>
vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <right> <nop>
vnoremap <left> <nop>
vnoremap <Space> zf

" cnoremap
cnoremap %% <C-R>=expand('%:h').'/'<cr>
cnoremap <silent> <c-l> <c-\>eGetCompletions()<cr>
"add an extra <cr> at the end of this line to automatically accept the fzf-selected completions.

" cmap
"cmap Tabe tabe
cmap w!! w !sudo tee % >/dev/null
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

" nmap
nmap <Leader>f0 :set foldlevel=0<CR>
nmap <Leader>f1 :set foldlevel=1<CR>
nmap <Leader>f2 :set foldlevel=2<CR>
nmap <Leader>f3 :set foldlevel=3<CR>
nmap <Leader>f4 :set foldlevel=4<CR>
nmap <Leader>f5 :set foldlevel=5<CR>
nmap <Leader>f6 :set foldlevel=6<CR>
nmap <Leader>f7 :set foldlevel=7<CR>
nmap <Leader>f8 :set foldlevel=8<CR>
nmap <Leader>f9 :set foldlevel=9<CR>
nmap <silent> <Leader>/ :nohlsearch<CR>
nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
nmap <Leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>

" smap
smap <C-Semicolon> <Plug>(neosnippet_expand_or_jump)
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" xmap
xmap <C-Semicolon> <Plug>(neosnippet_expand_target)

" Commands
command! -nargs=1 Locate call fzf#run({
      \   'source': 'locate <q-args>',
      \   'sink': 'e',
      \   'options': '-m'
      \ })

command! FZFBuffers call fzf#run({
      \   'source':  reverse(<SID>buflist()),
      \   'sink':    function('<SID>bufopen'),
      \   'options': '+m',
      \   'down':    len(<SID>buflist()) + 2
      \ })

command! FZFColors call fzf#run({
      \   'source':
      \     map(split(globpath(&rtp, "colors/*.vim"), "\n"),
      \         "substitute(fnamemodify(v:val, ':t'), '\\..\\{-}$', '', '')"),
      \   'sink':    'colo',
      \   'options': '+m',
      \   'left':    30
      \ })

command! FZFMru call fzf#run({
      \   'source': v:oldfiles,
      \   'sink' : 'e ',
      \   'options' : '-m',
      \ })

command! FZFTag if !empty(tagfiles()) | call fzf#run({
      \   'source': "sed '/^\\!/d;s/\t.*//' " . join(tagfiles()) . ' | uniq',
      \   'sink':   'tag',
      \ }) | else | echo 'No tags' | endif

command! FZFLines call fzf#run({
      \   'source':  <sid>buffer_lines(),
      \   'sink':    function('<sid>line_handler'),
      \   'options': '--extended --nth=3..',
      \   'down':    '60%'
      \ })

command! -nargs=1 AgFZF call fzf#run({
      \   'source': Arghandler(<f-args>),
      \   'sink' : function('AgHandler'),
      \   'options' : '-m'
      \ })

" Private functions
function! s:my_cr_function()
  "return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction

function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

function! s:line_handler(l)
  let keys = split(a:l, ':\t')
  exec 'buf ' . keys[0]
  exec keys[1]
  normal! ^zz
endfunction

function! s:buffer_lines()
  let res = []
  for b in filter(range(1, bufnr('$')), 'buflisted(v:val)')
    call extend(res, map(getbufline(b,0,"$"), 'b . ":\t" . (v:key + 1) . ":\t" . v:val '))
  endfor
  return res
endfunction

" vim: set sw=2 ts=2 sts=2 et tw=78 nospell:
