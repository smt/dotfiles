;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     ansible
     auctex
     auto-completion
     better-defaults
     clojure
     dockerfile
     editorconfig
     evil-commentary
     extra-langs
     finance
     (git :variables
          git-gutter-use-fringe t)
     go
     haskell
     html
     irc
     javascript
     markdown
     org
     osx
     perspectives
     php
     python
     ruby
     shell-scripts
     syntax-checking
     smt
     )
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
   ;; is `emacs' then the `holy-mode' is enabled at startup.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progess in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to a .PNG file.
   ;; If the value is nil then no banner is displayed.
   ;; dotspacemacs-startup-banner 'official
   dotspacemacs-startup-banner 'official
   ;; t if you always want to see the changelog at startup
   dotspacemacs-always-show-changelog t
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '(recents projects)
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(zenburn
                         leuven
                         monokai)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("DejaVu Sans Mono"
                               :size 13
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil the paste micro-state is enabled. While enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state t
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode nil
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil)
  ;; User initialization goes here

  ; Enable mouse support
  (unless window-system
    (require 'mouse)
    (xterm-mouse-mode t)
    (global-set-key [mouse-4] (lambda ()
                                (interactive)
                                (scroll-down 1)))
    (global-set-key [mouse-5] (lambda ()
                                (interactive)
                                (scroll-up 1)))
    (defun track-mouse (e))
    (setq mouse-sel-mode t
          mouse-yank-at-point t)
    )

  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        save-interprogram-paste-before-kill t
        apropos-do-all t
        require-final-newline t
        visible-bell t
        ediff-window-setup-function 'ediff-setup-windows-plain
        git-enable-github-support t)
  )

(defun dotspacemacs/config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."

  ;; follow symlinks without asking
  (setq vc-follow-symlinks t)

  ;; (setq-default web-mode-markup-indent-offset 4
  ;;               web-mode-css-indent-offset 4
  ;;               web-mode-code-indent-offset 4)

  ;; enable yasnippets globally, because why not?
  ;; (setq yas-snippet-dirs '("~/.emacs.d/snippets"                        ;; personal snippets
  ;;                          "~/.emacs.d/private/smt/extensions/snippets" ;; foo-mode and bar-mode snippet collection
  ;;                          yas-installed-snippets-dir                   ;; the default collection
  ;;                          ))
  (yas-global-mode 1)
  (add-hook 'flycheck-mode
            #'(lambda (dummy1 dummy2 dummy3)
                (and yas-active-field-overlay
                     (overlay-buffer yas-active-field-overlay))))
  (add-hook 'yas-before-expand-snippet-hook
            #'(lambda (dummy1 dummy2 dummy3)
                (sp-remove-active-pair-overlay)))

  ;; ;; JSX syntax highlighting
  ;; (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
  ;; (defadvice web-mode-highlight-part (around tweak-jsx activate)
  ;; (if (equal web-mode-content-type "jsx")
  ;;     (let ((web-mode-enable-part-face nil))
  ;;       ad-do-it)
  ;;   ad-do-it))

  ;; ;; JSX syntax checking
  ;; (flycheck-define-checker jsxhint-checker
  ;;   "A JSX syntax and style checker based on JSXHint."

  ;;   :command ("jsxhint" source)
  ;;   :error-patterns
  ;;   ((error line-start (1+ nonl) ": line " line ", col " column ", " (message) line-end))
  ;;   :modes (web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (equal web-mode-content-type "jsx")
                ;; enable flycheck
                (flycheck-select-checker 'jsxhint-checker)
                (flycheck-mode))))
  (setq jsx-indent-level 2)

  ;; JSX autocomplete
  (add-hook 'jsx-mode-hook
            (lambda () (auto-complete-mode 1)))

  ;; use evil-matchit everywhere
  ;; (global-evil-matchit-mode 1)

  ;; kind of useless, as i tend to use terminal
  (setq powerline-default-separator 'wave)

  ;; line numbers when i'm coding pls
  (add-to-hooks #'linum-mode '(c-mode-hook
                               clojure-mode-hook
                               css-mode-hook
                               dockerfile-mode-hook
                               emacs-lisp-mode-hook
                               go-mode-hook
                               haml-mode-hook
                               haskell-mode-hook
                               html-mode-hook
                               jade-mode-hook
                               jekyll-html-mode-hook
                               js2-mode-hook
                               jsx-mode-hook
                               lisp-mode-hook
                               php-mode-hook
                               python-mode-hook
                               sass-mode-hook
                               scss-mode-hook
                               stylus-mode-hook
                               text-mode-hook
                               web-mode-hook
                               yaml-mode-hook
                               ))

  (setq linum-format "%4d ")

  ;; TODO move js2-mode settings to config layer
  ;; (setq js2-basic-offset 2
  ;;       js2-bounce-indent-p t)
  ;; (add-hook 'js2-mode-hook (lambda ()
  ;;                            (electric-indent-mode -1)))

  ;; Org mode agenda files
  (setq org-agenda-files (list "~/Documents/todo.org")
        org-agenda-start-on-weekday 0)
  ;; (add-hook 'org-mode-hook (lambda ()
  ;;                            (load-theme 'leuven t)
  ;;                            (spacemacs/set-font "Inconsolata-dz" 12)))

  ;; Ensure I don't accidentally make changes to hidden sections in Org mode
  (setq org-catch-invisible-edits t)

  (setq rcirc-server-alist
        '(("irc.freenode.net"
           :nick "smtudor"
           :user-name "smtudor"
           :full-name "Stephen Tudor"
           :channels (
                      "#boardgames"
                      "#clojurescript"
                      "#docker"
                      "#duckduckgo"
                      "#emacs"
                      "##javascript"
                      "#meteor"
                      "#Node.js"
                      "#openvpn"
                      "#reactjs"
                      "#sass"
                      "#tmux"
                      "#vim"
                      ))))

  ;; (setq rcirc-authinfo
  ;;       '(("freenode" nickserv "smtudor" "s3cr3t")))

  (defvar rcirc-authinfo-file-name
    "~/.rcirc-authinfo"
    "File containing rcirc authentication passwords.
The file consists of a single list, with each element itself a
list with a SERVER-REGEXP string, a NICK-REGEXP string, a METHOD
and the remaining method specific ARGUMENTS.  The valid METHOD
symbols are `nickserv', `chanserv' and `bitlbee'.

The required ARGUMENTS for each METHOD symbol are:
  `nickserv': PASSWORD
  `chanserv': CHANNEL PASSWORD
  `bitlbee': PASSWORD

Example:
 ((\"freenode\" \"bob\" nickserv \"p455w0rd\")
  (\"freenode\" \"bob\" chanserv \"#bobland\" \"passwd99\")
  (\"bitlbee\" \"robert\" bitlbee \"sekrit\"))")

  (defvar rcirc-auto-authenticate-flag (file-readable-p rcirc-authinfo-file-name)
    "*Non-nil means automatically send authentication string to server.
See also `rcirc-auth'")

  )

;; Custom variables
;; ----------------

;; Do not write anything in this section. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-ispell-requires 4)
 '(ahs-case-fold-search nil)
 '(ahs-default-range (quote ahs-range-whole-buffer))
 '(ahs-idle-interval 0.25)
 '(ahs-idle-timer 0 t)
 '(ahs-inhibit-face-list nil)
 '(paradox-github-token t)
 '(ring-bell-function (quote ignore) t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
