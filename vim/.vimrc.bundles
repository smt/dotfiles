""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""" PLUGINS """"""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

filetype off

" Auto-install plug.vim
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

" Use shallow clone for plugins
let g:plug_shallow = 1

call plug#begin('~/.vim/plugged')

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" GENERAL
"-----------------------------------------------------------------------------

Plug 'Shougo/vimproc.vim'
Plug 'tpope/vim-eunuch', { 'on': ['Chmod', 'Find', 'Mkdir', 'Move', 'Remove',
      \ 'Rename', 'SudoEdit', 'SudoWrite', 'Unlink', 'Wall'] }                  " Vim sugar for UNIX shell commands (:h eunuch)
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'junegunn/fzf.vim', { 'on': ['Ag', 'Buffers', 'Colors', 'Commands',
      \ 'Commits', 'BCommits', 'Files', 'GitFiles', 'Helptags', 'History',
      \ 'Lines', 'BLines', 'Locate', 'Maps', 'Marks', 'Snippets', 'Tags',
      \ 'BTags', 'Windows'] }                                                   " Fuzzy finder
Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }    " Align stuff interactively
Plug 'embear/vim-localvimrc'                                                    " Support for .lvimrc files (:h localvimrc)
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle'] }                        " File navigation (:h nerdtree)
Plug 'eiginn/netrw'                                                             " Plugin-ified netrw (:h netrw)
Plug 'tpope/vim-obsession', { 'on': ['Obsession'] }                             " Session management (:h obsession)
Plug 'tpope/vim-repeat'                                                         " Repeat tpope plugin commands with . (:h repeat)
Plug 'mhinz/vim-sayonara', { 'on': ['Sayonara'] }                               " Sane buffer closing (:h sayonara)
Plug 'tmux-plugins/vim-tmux-focus-events'                                       " Enable tmux focus event hooks
Plug 'christoomey/vim-tmux-navigator'                                           " Navigate Vim windows like tmux windows
Plug 'tpope/vim-vinegar', { 'on': ['<Plug>(VinegarUp)'] }                       " Netrw enhancements (:h vinegar)
Plug 'reedes/vim-wheel'                                                         " Screen-anchored cursor movement (:h wheel)

" STYLING
"-----------------------------------------------------------------------------

Plug 'morhetz/gruvbox'                                                          " '70s throwback colorscheme (light and dark)
Plug 'itchyny/lightline.vim'                                                    " A lightweight status bar
Plug 'junegunn/seoul256.vim'                                                    " Colorscheme based on the Seoul color palette (light and dark)
Plug 'mhinz/vim-startify'                                                       " Fancy start screen for Vim

" WRITING/AUTHORING TOOLS
"-----------------------------------------------------------------------------

Plug 'reedes/vim-pencil' | Plug 'reedes/vim-colors-pencil'                      " Wrapping and punctuation presets for writing (:h pencil)
Plug 'tpope/vim-abolish', { 'on': ['Abolish', 'Subvert'] }                      " Pattern-based substitution and iabbrev enhancements (:h abolish)
Plug 'junegunn/goyo.vim', { 'for': ['pandoc'] }                                 " Distraction-free writing mode (:h goyo) (:h limelight)
Plug 'junegunn/limelight.vim', { 'for': ['pandoc'] }
Plug 'vim-pandoc/vim-pandoc', { 'for': ['pandoc'] }                             " Universal text format for the now (:h pandoc)
Plug 'vim-pandoc/vim-pandoc'
      \ | Plug 'vim-pandoc/vim-pandoc-after', { 'for': ['pandoc'] }
Plug 'vim-pandoc/vim-pandoc'
      \ | Plug 'vim-pandoc/vim-pandoc-syntax', { 'for': ['pandoc'] }
Plug 'reedes/vim-lexical', { 'for': ['pandoc'] }                                " Thesaurus, dictionary, and spellchecking (:h lexical)
Plug 'reedes/vim-litecorrect', { 'for': ['pandoc'] }                            " Lightweight autocorrection
Plug 'kana/vim-textobj-user'
      \ | Plug 'reedes/vim-textobj-quote', { 'for': ['pandoc'] }                " Text object extension for typographic quotes and sentences
Plug 'kana/vim-textobj-user'
      \ | Plug 'reedes/vim-textobj-sentence', { 'for': ['pandoc'] }
Plug 'reedes/vim-wordy', { 'for': ['pandoc'] }                                  " Brutally honest usage problem detector (:h wordy)

" DEV TOOLS
"-----------------------------------------------------------------------------

Plug 'tpope/vim-fugitive', { 'on': ['Gblame', 'Gcommit', 'Gdiff', 'Gedit',
      \ 'Git', 'Glog', 'Gread', 'Gstatus', 'Gwrite'] }                          " Git manager (:h fugitive)
Plug 'gabesoft/vim-ags', { 'on': ['Ags'] }                                      " Silver searcher for Vim (:h ags)
Plug 'tpope/vim-commentary'                                                     " Context-aware code comments (:h commentary)
Plug 'editorconfig/editorconfig-vim'                                            " EditorConfig (:h editorconfig)
Plug 'mattn/emmet-vim', { 'for': ['html', 'css', 'less', 'scss'] }              " Emmet (:h emmet)
Plug 'mattn/gist-vim', { 'on': ['Gist'] }                                       " Gist creation (:h gist)
Plug 'gregsexton/gitv', { 'on': ['Gitv'] }                                      " gitk clone for Vim (:h gitv)
Plug 'cohama/lexima.vim'                                                        " Context-aware auto-closing pairs (:h lexima)
Plug 'terryma/vim-multiple-cursors'                                             " Multiple cursors (:h multiple-cursors)
Plug 'benekastah/neomake'                                                       " Syntax checking (:h neomake)
Plug 'scrooloose/nerdtree'
      \ | Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': ['NERDTreeToggle'] }
Plug 'tpope/vim-projectionist'                                                  " Project definition (:h projectionist)
Plug 'tomtom/quickfixsigns_vim'                                                 " Show signs in gutter for interesting lines (:h quickfixsigns) (:h signify)
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-rsi'                                                            " Readline key bindings (:h rsi)
Plug 'tpope/vim-sleuth'                                                         " Automatically change whitespace settings to match any file (:h sleuth)
Plug 'AndrewRadev/sideways.vim', { 'on': ['SidewaysLeft', 'SidewaysRight'] }    " Shift function arguments left or right (:h sideways)
Plug 'tpope/vim-speeddating'                                                    " Use <C-a> and <C-x> to increment and decrement times and dates (:h speedating)
Plug 'tpope/vim-surround'                                                       " Surround text objects
Plug 'AndrewRadev/switch.vim', { 'on': ['Switch'] }                             " Swaps a text object under cursor for its opposite (:h switch)
Plug 'pelodelfuego/vim-swoop', { 'on': ['Swoop'] }                              " Helm-like interactive search/replace (:h swoop)
Plug 'majutsushi/tagbar', { 'on': ['TagbarToggle'] }                            " Code object browser (:h tagbar)
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'                             " Snippets (:h ultisnips)
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }                              " Interactive undo tree (:h undotree)
Plug 'tpope/vim-unimpaired'                                                     " Pairs of handy bracket mappings (:h unimpaired)

" FILETYPE-SPECIFIC
"-----------------------------------------------------------------------------

if v:version >= 703
  " Clojure
  Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
  Plug 'kovisoft/paredit', { 'for': 'clojure' }
  Plug 'guns/vim-clojure-static', { 'for': 'clojure' }
  Plug 'guns/vim-clojure-highlight', { 'for': 'clojure' }

  " Ruby
  Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
endif

" Multiple
Plug 'Chiel92/vim-autoformat', { 'for': ['css', 'go', 'html', 'javascript', 'scss', 'xml'] }
Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'less', 'scss'] }

" Coffee-Script
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }

" Elm
Plug 'ElmCast/elm-vim', { 'for': 'elm' }

" Golang
Plug 'fatih/vim-go', { 'for': 'go' }

" HTML
Plug 'othree/html5.vim', { 'for': 'html' }
Plug 'othree/html5-syntax.vim', { 'for': 'html' }

" Jade
Plug 'digitaltoad/vim-jade', { 'for': 'jade' }

" JavaScript
Plug 'marijnh/tern_for_vim', { 'for': 'javascript', 'do': 'npm install' }
Plug '1995eaton/vim-better-javascript-completion', { 'for': 'javascript' }
Plug 'othree/yajs.vim', { 'for': ['javascript', 'jsx', 'typescript'] }
Plug 'othree/es.next.syntax.vim', { 'for': ['javascript', 'jsx', 'typescript'] }
Plug 'othree/javascript-libraries-syntax.vim', { 'for': ['javascript', 'jsx'] }
Plug 'moll/vim-node', { 'for': 'javascript' }
Plug 'burnettk/vim-angular', { 'for': 'javascript' }
Plug 'claco/jasmine.vim', { 'for': 'javascript' }
Plug 'heavenshell/vim-jsdoc', { 'for': ['javascript', 'typescript'] }

" JSON
Plug 'elzr/vim-json', { 'for': 'json' }

" JSX
Plug 'mxw/vim-jsx', { 'for': 'jsx' }

" Ledger
Plug 'ledger/vim-ledger', { 'for': 'ledger' }

" Less
Plug 'groenewege/vim-less', { 'for': 'less' }

" Python
Plug 'klen/python-mode', { 'for': 'python' }
Plug 'python_match.vim', { 'for': 'python' }
Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'JarrodCTaylor/vim-python-test-runner', { 'for': 'python' }
Plug 'joonty/vdebug', { 'for': 'python' }

" Rust
Plug 'rust-lang/rust.vim', { 'for': 'rust' }

" Scala
Plug 'derekwyatt/vim-scala', { 'for': 'scala' }

" SCSS
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }

" Stylus
Plug 'wavded/vim-stylus', { 'for': 'stylus' }

" tmux
Plug 'tmux-plugins/vim-tmux', { 'for': 'tmux' }

" TypeScript
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'Shougo/vimproc.vim' | Plug 'Quramy/tsuquyomi', { 'for': 'typescript' }

call plug#end()

" vim: set sw=2 ts=2 sts=2 et tw=78 nospell:
