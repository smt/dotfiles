snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element){
	$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}){
	$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}:${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function $2(${3:first_argument}) {
	$0
};

endsnippet

snippet fun "Function"
function ${1:function_name}(${2:argument}) {
	$0
}
endsnippet

snippet f "Anonymous Function"
function (${1:argument}) {
	$0
}${2:;}
endsnippet

snippet (f "Immediately-invoked Function Expression (IIFE)"
(function (${1:argument}) {
	$0
}(${2}));
endsnippet

snippet if "if"
if (${1:true}) {
	$0
}
endsnippet

snippet ife "if ... else"
if (${1:true}) {
	${2}
}${3: else}$0
endsnippet

snippet else "else"
else ${1:if (${2:true}) }{
	${3}
}${4: else}$0
endsnippet

snippet ter "Tertiary conditional"
${1:condition} ? ${2:a} : ${3:b}
endsnippet

snippet switch "switch"
switch (${1:expression})
case '${3:case}':
	${4}
	break;${5:
case}$0
default:
	${2}
endsnippet

snippet case "case"
case '${1:case}':
	${2}
	break;
	$0
endsnippet

snippet for "for (...) {...}"
for (var ${2:i} = 0; $2 < ${1:arr}.length; $2++) {
	${3:$1[$2]}$0
}
 endsnippet

snippet forr "for (...) {...} (faster)"
for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2--){
	${3:$1[$2]}$0
}
endsnippet

snippet fori "for (property in object) {...}"
for (var ${2:prop} in ${1:obj}) {
	${3:$1[$2]}$0
}
endsnippet

snippet has "hasOwnProperty"
hasOwnProperty($0)
endsnippet

snippet while "while (...) {...}"
while (${1:condition}) {
	$0
}
endsnippet

snippet try "try ... catch"
try {
	${1})
} catch (${2:e}) {
	${3}
}
endsnippet

snippet do "do ... while"
do {
	$0
} while (${1:condition});
endsnippet

snippet log "console.log"
console.log($0);
endsnippet

snippet warn "console.warn"
console.warn($0);
endsnippet

snippet err "console.error"
console.error($0);
endsnippet

snippet ret "return"
return ${0:result};
endsnippet

snippet /** "docstring"
/**
 * ${0:description}
 *
 */
endsnippet

snippet @par "@param"
@param {${1:type}} ${2:name} ${0:description}
endsnippet

snippet @ret "@return"
@return {${1:type}} ${0:description}
endsnippet

snippet timeout "setTimeout function"
setTimeout(${1:function() {$0}${3:}, ${2:10}});
endsnippet

# vim:ft=snippets:
