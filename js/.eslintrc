{
    "env": {
        "browser": true,
        "es6": true,
        "jasmine": true,
        "jquery": true,
        "mocha": true,
        "node": true,
        "phantomjs": true
    },

    "globals": {
        "_": true
    },

    "ecmaFeatures": {
        "modules": true
    },

    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module"
    },

    "plugins": [
    ],

    "rules": {
        // use 0 to disable rule
        // use 1 to make rule a warning
        // use 2 to make rule an error

        // POSSIBLE ERRORS
        "no-await-in-loop": 2,                  // disallow await inside loops
        "no-cond-assign": [2, "always"],        // disallow conditional assignments i.e. if (a = "foo")
        "no-console": 1,                        // disallow console statements
        "no-constant-condition": 2,             // disallow constants in conditionals i.e. if (true)
        "no-control-regex": 2,                  // disallow ASCII range 0-31 in a regex
        "no-debugger": 2,                       // disallow debugger statements
        "no-dupe-args": 2,                      // disallow duplicate functional args
        "no-dupe-keys": 2,                      // disallow duplicate object keys
        "no-duplicate-case": 2,                 // disallow duplicate case labels in a switch statement
        "no-empty-character-class": 2,          // disallow /a[]/ in a regex
        "no-empty": 2,                          // disallow empty conditionals i.e. if (foo) {}
        "no-ex-assign": 2,                      // disallow assign the exception a value in a catch block
        "no-extra-boolean-cast": 1,             // disallow unnecessary if (!!foo) re-cast
        "no-extra-parens": 2,                   // disallow a + (b * c)
        "no-extra-semi": 2,                     // disallow var foo = 1;;
        "no-func-assign": 2,                    // disallow functional aliases being re-assigned a value
        "no-inner-declarations": [2, "both"],   // disallow function or variable declarations inside a conditional
        "no-invalid-regexp": 2,                 // enforce valid regex
        "no-irregular-whitespace": 2,           // enforce tabs and spaces only
        "no-obj-calls": 2,                      // disallow Math() & JSON() calls
        "no-prototype-builtins": 1,             // disallow use of Object.prototype builtins
        "no-regex-spaces": 2,                   // disallow multiple spaces in a regex
        "no-sparse-arrays": 2,                  // disallow sparse arrays i.e. [,,]
        "no-template-curly-in-string": 2,       // disallow template literal placeholder syntax in regular strings
        "no-unreachable": 2,                    // disallow statements after a return
        "no-unsafe-finally": 2,                 // disallow control flow statements in finally blocks
        "no-unsafe-negation": 2,                // disallow !a in b vs. !(a in b)
        "use-isnan": 2,                         // enforce the use of isNaN()
        "valid-jsdoc": [1, {                    // enforce valid jsdoc style comments
            "prefer": {
                "return": "returns"
            },
            "requireParamDescription": true,
            "requireReturn": false
        }],
        "valid-typeof": 2,                      // disallow typeof a === undefined vs. typeof a === 'undefined'


        // BEST PRACTICES
        "accessor-pairs": [2, {                 // enforce getter with setter
            "getWithoutSet": false,
            "setWithoutGet": true
        }],
        "array-callback-return": 2,             // enforce return statements in callbacks of array methods
        "block-scoped-var": 2,                  // disallow variable use outside of block
        "class-methods-use-this": 1,            // enforce class methods that utilize this
        "complexity": [2, 5],                   // disallow cyclomatic complexity threshold
        "consistent-return": 1,                 // enforce an explicit return
        "curly": 2,                             // require curly brackets for all conditionals
        "default-case": 2,                      // require default-case for switch statements
        "dot-location": [2, "property"],        // enforce newline behavior for an object's dot location
        "dot-notation": [2, {                   // require dot-notation for object references
            "allowKeywords": false
        }],
        "eqeqeq": 2,                            // require === vs. ==
        "guard-for-in": 2,                      // require use of if statement within for in blocks
        "no-alert": 2,                          // disallow alert(), confirm() and prompt()
        "no-caller": 2,                         // disallow argument.caller & argument.callee
        "no-div-regex": 2,                      // disallow a regex that looks like division i.e. /=2/
        "no-else-return": 2,                    // disallow an else statement after a return
        "no-eq-null": 2,                        // disallow == null
        "no-eval": 2,                           // disallow eval()
        "no-extend-native": 2,                  // disallow global pollution
        "no-extra-bind": 2,                     // disallow unnecessary binding
        "no-fallthrough": 2,                    // disallow case statements without a break
        "no-floating-decimal": 2,               // disallow leading and trailing decimals in floats
        "no-global-assign": 2,                  // disallow native objects from being reassigned
        "no-implied-eval": 2,                   // disallow setTimeout and setInterval eval
        "no-iterator": 2,                       // disallow __iterator__ use
        "no-labels": 2,                         // disallow labelled statements
        "no-lone-blocks": 2,                    // disallow use of braces which do nothing
        "no-loop-func": 2,                      // disallow creation of functions within loops
        "no-multi-spaces": 2,                   // disallow multiple spaces
        "no-multi-str": 2,                      // disallow multiline strings
        "no-new": 2,                            // disallow use of new operator outside of comparisons and assignment
        "no-new-func": 2,                       // disallow new Function
        "no-new-wrappers": 2,                   // disallow new String, Boolean and Number
        "no-octal": 2,                          // disallow octal literals
        "no-octal-escape": 2,                   // disallow octal use in strings
        "no-param-reassign": 1,                 // disallow parameters reassignment
        "no-proto": 2,                          // disallow use of __proto__
        "no-redeclare": 2,                      // disallow variable redeclaration
        "no-return-assign": 2,                  // disallow assignments on return statements
        "no-return-await": 1,                   // disallow unnecessary return await
        "no-script-url": 2,                     // disallow use of "javascript:" urls
        "no-self-compare": 2,                   // disallow use of x === x
        "no-sequences": 2,                      // disallow use of comma operator for multiple in-line expressions
        "no-throw-literal": 2,                  // enforce throwing of exception or new Error
        "no-unmodified-loop-condition": 2,      // disallow unmodified loop conditions
        "no-unused-expressions": 2,             // disallow unused values in an expression
        "no-unused-labels": 0,                  // disallow unused labels
        "no-useless-concat": 1,                 // disallow unnecessary concatenation of literals or template literals
        "no-useless-escape": 1,                 // disallow unnecessary escape characters
        "no-useless-return": 1,                 // disallow redundant return statements
        "no-void": 2,                           // disallow use of void
        "no-warning-comments": 0,               // disallow use of TODO and FIXME
        "no-with": 2,                           // disallow use of with
        "radix": 2,                             // enforce use of second arg for parseInt()
        "require-await": 1,                     // disallow async functions which have no await expression
        "vars-on-top": 0,                       // enforce variable declarations at the top of the scope
        "wrap-iife": [2, "outside"],            // enforce iife parentheses wrapping
        "yoda": [2, "never", {                  // disallow yoda statements i.e. 'red' === foo
            "exceptRange": true
        }],


        // STRICT MODE
        "strict": 1,                            // enforce use of strict mode


        // VARIABLES
        "init-declarations": 0,                 // enforce or disallow initialization in var declarations
        "no-catch-shadow": 1,                   // disallow duplicate use of alias for catch statements
        "no-delete-var": 1,                     // disallow variable deletes (allows for object property deletes)
        "no-label-var": 1,                      // disallow labels that share variable names
        "no-restricted-globals": 0,             // disallow specified global variables
        "no-shadow-restricted-names": 2,        // disallow use of restricted names
        "no-shadow": 1,                         // disallow identical variables names in outer and inner scopes
        "no-undef": 2,                          // disallow use of undeclared variables unless mentioned in a /*global ...*/ comment
        "no-undef-init": 2,                     // disallow initialization of a variable with undefined
        "no-undefined": 0,                      // disallow use of undefined
        "no-unused-vars": [1, {                 // disallow unused variables
            "vars": "all",
            "args": "after-used"
        }],
        "no-use-before-define": 2,              // disallow use of variable before declaration


        // NODE.JS AND COMMONJS
        "callback-return": 1,                   // require return statements after callbacks
        "global-require": 1,                    // require require() calls to be placed at top-level module scope
        "handle-callback-err": 1,               // enforce handling of the callback error
        "no-mixed-requires": 1,                 // disallow mixing of require statements
        "no-new-require": 1,                    // disallow use of a new statement with a require statement
        "no-path-concat": 1,                    // disallow string concat with __dirname & __filename
        "no-process-env": 1,                    // disallow use of process.env
        "no-process-exit": 1,                   // disallow process.exit()
        "no-restricted-modules": 0,             // disallow use of specific node modules
        "no-sync": 0,                           // disallow use of synchronous methods


        // STYLISTIC ISSUES
        "array-bracket-spacing": [2, "never"],  // enforce or disallow spaces inside of brackets
        "block-spacing": [2, "always"],         // enforce or disallow spaces inside of single-line blocks
        "brace-style": [2, "1tbs"],             // enforce brace-style
        "camelcase": [0, {                      // enforce camel-cased variable names i.e. fooBar
            "properties": "always"
        }],
        "capitalized-comments": [0, "always"],  // enforce or disallow capitalization of the first letter of a comment
        "comma-dangle": [2, "never"],           // disallow trailing commas
        "comma-spacing": [2, {                  // enforce comma spacing
            "before": false,
            "after": true
        }],
        "comma-style": [2, "last"],             // enforce where the comma is placed
        "computed-property-spacing": [2, "never"],  // enforce consistency of spacing inside computed properties
        "consistent-this": [2, "_this"],        // enforce use of self when aliasing this
        "eol-last": [2, "always"],              // enforce or disallow newline at eof
        "func-call-spacing": [1, "never"],      // enforce spacing between function identifiers and their invokations
        "func-name-matching": 0,                // require function names to match the var or property name to which they are assigned
        "func-names": [1, "as-needed"],         // enforce function names - no anonymous functions
        "func-style": [2, "expression"],        // enforce function declarations vs. expressions
        "indent": [1, 4, {                      // enforce tab width
             "SwitchCase": 0
        }],
        "key-spacing": [2, {                    // enforce object key spacing around colons
            "beforeColon": false,
            "afterColon": true,
            "mode": "strict"
        }],
        "keyword-spacing": 2,                   // enforce consistent spacing before and after keywords
        "lines-around-comment": [1, {           // enforce newlines around comments
            "beforeBlockComment": true,
            "beforeLineComment": true,
            "allowBlockStart": true,
            "allowObjectStart": true,
            "allowArrayStart": true
        }],
        "linebreak-style": [2, "unix"],         // disallow mixing of CRLF and LF line breaks
        "max-nested-callbacks": [2, 3],         // enforce max number of nested callbacks
        "new-cap": [2, {                        // enforce capital letter for constructors
            "capIsNew": false
        }],
        "new-parens": 2,                        // disallow no parentheses on a constructor with no params
        "newline-after-var": [1, "always"],     // enforce newline after variable declaration
        "no-array-constructor": 1,              // disallow use of new Array
        "no-continue": 1,                       // disallow use of continue statements
        "no-inline-comments": 0,                // disallow inline comments
        "no-lonely-if": 2,                      // disallow if statement within else block
        "no-mixed-spaces-and-tabs": 2,          // disallow tabs and spaces
        "no-multiple-empty-lines": [1, {        // disallow multiple newlines
            "max": 2,
            "maxBOF": 0,
            "maxEOF": 0
        }],
        "no-nested-ternary": 2,                 // disallow nested ternaries - only one allowed
        "no-new-object": 2,                     // disallow new Object
        "no-ternary": 0,                        // disallow use of ternary operators
        "no-trailing-spaces": 2,                // disallow use of trailing spaces on a line
        "no-underscore-dangle": 1,              // disallow use of underscores at the end of variable names
        "no-unneeded-ternary": 2,               // disallow use of booleans in a conditional expression
        "object-curly-newline": [1, {           // enforce consistent line breaks inside braces
            "ObjectExpression": {
                "multiline": true,
                "minProperties": 2
            },
            "ObjectPattern": {
                "multiline": true,
                "minProperties": 6
            }
        }],
        "object-curly-spacing": [2, "always"],  // enforce spacing inside object braces
        "object-property-newline": [2, {        // enforce placing object properties on separate lines
            "allowMultiplePropertiesPerLine": true
        }],
        "one-var": [2, "never"],                // enforce single var statement
        "one-var-declaration-per-line": [2, "always"], // require or disallow newlines around var declarations
        "operator-assignment": [0, "always"],   // enforce operator assignment where possible
        "operator-linebreak": [1, "after"],     // enforce linebreaks before of after operators
        "padded-blocks": [2, "never"],          // enforce linebreaks within blocks
        "quote-props": [1, "as-needed"],        // enforce object literals to put keys in quotes
        "quotes": [1, "single", {               // enforce use of single quotes
            "avoidEscape": true,
            "allowTemplateLiterals": true
        }],
        "semi-spacing": [2, {                   // enforce use of space before and after semi-colons
            "before": false,
            "after": true
        }],
        "semi": [2, "always"],                  // enforce use of semi-colons
        "sort-vars": [0, {                      // enforce variable sorting alphabetically
            "ignoreCase": true
        }],
        "space-before-blocks": [2, "always"],   // enforce space before opening brace i.e. if () {}
        "space-before-function-paren": [2, {    // enforce function ()
            "anonymous": "always",
            "named": "never"
        }],
        "space-in-parens": [2, "never"],        // enforce spacing within parentheses
        "space-infix-ops": 2,                   // enforce spacing around operators i.e. a + b
        "space-unary-ops": [2, {                // enforce spacing for typeof, delete, etc
            "words": true,
            "nonwords": false
        }],
        "spaced-comment": [1, "always"],        // enforce whitespace beginning a comment
        "wrap-regex": 0,                        // enforce a regex being wrapped in parentheses


        // ES6

        "arrow-body-style": [2, "as-needed"],   // require braces around arrow function bodies
        "arrow-parens": [2, "as-needed"],       // require parentheses around arrow function arguments
        "arrow-spacing": 2,                     // enforce consistent spacing before and after the arrow in arrow functions
        "constructor-super": 1,                 // require super() calls in constructors
        "generator-star-spacing": [2, "after"], // enforce consistent spacing around * operators in generator functions
        "no-class-assign": 1,                   // disallow reassigning class members
        "no-confusing-arrow": 0,                // disallow arrow functions where they could be confused with comparisons
        "no-const-assign": 2,                   // disallow reassigning const variables
        "no-dupe-class-members": 2,             // disallow duplicate class members
        "no-duplicate-imports": 2,              // disallow duplicate module imports
        "no-new-symbol": 0,                     // disallow new operators with the Symbol object
        "no-restricted-imports": 0,             // disallow specified modules when loaded by import
        "no-this-before-super": 1,              // disallow this/super before calling super() in constructors
        "no-useless-computed-key": 1,           // disallow unnecessary computed property keys in object literals
        "no-useless-constructor": 0,            // disallow unnecessary constructors
        "no-useless-rename": 0,                 // disallow renaming import, export, and destructured assignments to the same name
        "no-var": 1,                            // require let or const instead of var
        "object-shorthand": [1, "always"],      // require or disallow method and property shorthand syntax for object literals
        "prefer-arrow-callback": 1,             // require arrow functions as callbacks
        "prefer-const": 1,                      // require const declarations for variables that are never reassigned after declared
        "prefer-numeric-literals": 0,           // disallow parseInt() in favor of binary, octal, and hexadecimal literals
        "prefer-rest-params": 0,                // require rest parameters instead of arguments
        "prefer-spread": 0,                     // require spread operators instead of .apply()
        "prefer-template": 1,                   // require template literals instead of string concatenation
        "require-yield": 1,                     // require generator functions to contain yield
        "rest-spread-spacing": 0,               // enforce spacing between rest and spread operators and their expressions
        "sort-imports": 0,                      // enforce sorted import declarations within modules
        "symbol-description": 0,                // require symbol descriptions
        "template-curly-spacing": 2,            // require or disallow spacing around embedded expressions of template strings
        "yield-star-spacing": 2,                // require or disallow spacing around the * in yield* expressions


        // LEGACY
        "max-depth": 0,                         // enforce the maximum depth that blocks can be nested
        "max-len": 0,                           // enforce the maximum length of a line
        "max-params": 0,                        // enforce the maximum number of parameters allowed per function
        "max-statements": 0,                    // enforce the maximum number of statements allowed per function
        "no-bitwise": 0,                        // disallow use of bitwise operators (&, |, ^, ~, <<, >>, >>>, |=, &=, ^=, <<=, >>=, >>>=)
        "no-plusplus": 0,                       // disallow use of unary operators (++ and --)


        // PLUGINS
    }
}
