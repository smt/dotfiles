{
    "env": {
        "browser": true,
        "node": true,
        "jasmine": true,
        "amd": true,
        "es6": true
    },

    "globals": {
        "inject": true,
        "Firebase": true,
        "process": true,
        "React": true,
        "ReactFireMixin": true,
        "ReactRouter": true
    },

    "ecmaFeatures": {
        "arrowFunctions": true,
        "binaryLiterals": true,
        "blockBindings": true,
        "classes": true,
        "defaultParams": true,
        "destructuring": true,
        "forOf": true,
        "generators": true,
        "modules": true,
        "objectLiteralComputedProperties": true,
        "objectLiteralDuplicateProperties": false,
        "objectLiteralShorthandMethods": true,
        "objectLiteralShorthandProperties": true,
        "octalLiterals": false,
        "regexUFlag": true,
        "regexYFlag": true,
        "restParams": true,
        "spread": true,
        "superInFunctions": true,
        "templateStrings": true,
        "unicodeCodePointEscapes": true,
        "globalReturn": false,
        "jsx": true
    },

    "rules": {
        // use 0 to disable rule
        // use 1 to make rule a warning
        // use 2 to make rule an error

        // possible errors section
        "comma-dangle": [2, "never"],           // prevent trailing commas
        "no-cond-assign": [2, "always"],        // prevent conditional assignments i.e. if (a = "foo")
        "no-console": 0,                        // prevent console statements
        "no-constant-condition": 2,             // prevent constants in conditionals i.e. if (true)
        "no-control-regex": 2,                  // prevent ASCII range 0-31 in a regex
        "no-debugger": 2,                       // prevent debugger statements
        "no-dupe-args": 2,                      // prevent duplicate functional args
        "no-dupe-keys": 2,                      // prevent duplicate object keys
        "no-duplicate-case": 2,                 // prevent duplicate case labels in a switch statement
        // "no-empty-character-class": 2,          // prevent /a[]/ in a regex
        "no-empty": 2,                          // prevent empty conditionals i.e. if (foo) {}
        "no-ex-assign": 2,                      // prevent assign the exception a value in a catch block
        "no-extra-boolean-cast": 2,             // prevent unnecessary if (!!foo) re-cast
        "no-extra-parens": 0,                   // prevent a + (b * c)
        "no-extra-semi": 2,                     // prevent var foo = 1;;
        "no-func-assign": 2,                    // prevent functional aliases being re-assigned a value
        "no-inner-declarations": [2, "both"],   // prevent function or variable declarations inside a conditional
        "no-invalid-regexp": 2,                 // enforce valid regex
        "no-irregular-whitespace": 2,           // enforce tabs and spaces only
        "no-negated-in-lhs": 2,                 // prevent !a in b vs. !(a in b)
        "no-obj-calls": 2,                      // prevent Math() & JSON() calls
        "no-regex-spaces": 2,                   // prevent multiple spaces in a regex
        "no-reserved-keys": 2,                  // prevent reserved words used as obj keys
        "no-sparse-arrays": 2,                  // disallow sparse arrays i.e. [,,]
        "no-unreachable": 2,                    // prevent statements after a return
        "use-isnan": 2,                         // force the use of isNaN()
        "valid-jsdoc": [2, {                    // enforce valid jsdoc style comments
            "prefer": {
                "return": "returns"
            }
        }],
        "valid-typeof": ;2,                     // prevent typeof a === undefined vs. typeof a === 'undefined'


        // best practice section
        // "accessor-pairs": 2,                    // enforce getter with setter                
        "block-scoped-var": 2,                  // prevent variable use outside of block
        "complexity": false,                    // prevent cyclomatic complexity threshold
        "consistent-return": 2,                 // enforce an explicit return
        "curly": 2,                             // require curly brackets for all conditionals
        "default-case": 2,                      // require default-case for switch statements
        "dot-location": [2, "property"],        // enforce newline behavior for an object's dot location
        "dot-notation": 2,                      // require dot-notation for object references
        "eqeqeq": 2,                            // require === vs. ==
        "guard-for-in": 2,                      // require use of if statement within for in blocks
        "no-alert": 2,                          // prevent alert(), confirm() and prompt()
        "no-caller": 2,                         // prevent argument.caller & argument.callee
        "no-div-regex": 2,                      // prevent a regex that looks like division i.e. /=2/
        "no-else-return": 2,                    // prevent an else statement after a return
        "no-empty-label": 2,                    // prevent goto lookalike statements
        "no-eq-null": 2,                        // prevent == null
        "no-eval": 2,                           // prevent eval()
        "no-extend-native": 2,                  // prevent global pollution
        "no-extra-bind": 2,                     // prevent unnecessary binding
        "no-fallthrough": 2,                    // prevent case statements without a break
        "no-floating-decimal": 2,               // prevent leading and trailing decimals in floats
        "no-implied-eval": 2,                   // prevent setTimeout and setInterval eval
        "no-iterator": 2,                       // prevent __iterator__ use
        "no-labels": 2,                         // prevent labelled statements
        "no-lone-blocks": 2,                    // prevent use of braces which do nothing
        "no-loop-func": 2,                      // prevent creation of functions within loops
        "no-multi-spaces": 2,                   // prevent multiple spaces
        "no-multi-str": 2,                      // prevent multiline strings
        "no-native-reassign": 2,                // prevent native objects from being reassigned
        "no-new": 2,                            // prevent use of new operator outside of comparisons and assignment
        "no-new-func": 2,                       // prevent new Function
        "no-new-wrappers": 2,                   // prevent new String, Boolean and Number
        "no-octal": 2,                          // prevent octal literals
        "no-octal-escape": 2,                   // prevent octal use in strings
        "no-param-reassign": 0,                 // prevent parameters reassignment
        "no-process-env": 0,                    // prevent use of process.env
        "no-proto": 2,                          // prevent use of __proto__
        "no-redeclare": 2,                      // prevent variable redeclaration
        "no-return-assign": 2,                  // prevent assignments on return statements
        "no-script-url": 2,                     // prevent use of "javascript:" urls
        "no-self-compare": 2,                   // prevent use of x === x
        "no-sequences": 2,                      // prevent use of comma operator for multiple in-line expressions
        "no-throw-literal": 2,                  // enforce throwing of exception or new Error
        "no-unused-expressions": 2,             // prevent unused values in an expression
        "no-void": 2,                           // prevent use of void
        "no-warning-comments": 0,               // prevent use of TODO and FIXME
        "no-with": 2,                           // prevent use of with
        "radix": 2,                             // enforce use of second arg for parseInt()
        "vars-on-top": 2,                       // enforce variable declarations at the top of the scope
        "wrap-iife": 2,                         // enforce iife parentheses wrapping
        "yoda": [2, "never"],                   // prevent yoda statements i.e. 'red' === foo


        // strict section
        "strict": 2,                            // enforce use of strict mode


        // variables section
        "no-catch-shadow": 2,                   // prevent duplicate use of alias for catch statements
        "no-delete-var": 2,                     // prevent variable deletes (allows for object property deletes)
        "no-label-var": 2,                      // prevent labels that share variable names
        "no-shadow-restricted-names": 2,        // prevent use of restricted names
        "no-shadow": 2,                         // prevent identical variables names in outer and inner scopes
        "no-undef-init": 2,                     // prevent initialization of a variable with undefined
        "no-undefined": 2,                      // prevent use of undefined
        "no-unused-vars": [0, {                 // prevent unused variables
            "vars": "all",
            "args": "after-used"
        }],
        "no-use-before-define": 2,              // prevent use of variable before declaration


        // node.js section
        "handle-callback-err": 2,               // enforce handling of the callback error
        "no-mixed-requires": 1,                 // prevent mixing of require statements
        "no-new-require": 2,                    // prevent use of a new statement with a require statement
        "no-path-concat": 2,                    // prevent string concat with __dirname & __filename
        "no-process-exit": 2,                   // prevent process.exit()
        "no-restricted-modules": 0,             // prevent use of specific node modules 
        "no-sync": 0,                           // prevent use of synchronous methods


        // stylistic issues
        "brace-style": [2, "1tbs"],             // enforce brace-style
        "camelcase": [2, {                      // enforce camel-cased variable names i.e. fooBar
            "properties": "always"
        }],
        "comma-spacing": [2, {                  // enforce comma spacing
            "before": false,
            "after": true
        }],
        "comma-style": [2, "last"],             // enforce where the comma is placed
        "consistent-this": [2, "self"],         // enforce use of self when aliasing this
        "eol-last": 2,                          // enforce newline at eof
        "func-names": 2,                        // enforce function names - no anonymous functions
        "func-style": [2, "declaration"],       // enforce function declarations vs. expressions
        "indent": [2, 4, {                      // enforce tab width
            "indentSwitchCase": true
        }],
        "key-spacing": [2, {                    // enforce object key spacing around colons
            "beforeColon": false,
            "afterColon": true
        }],
        // "lines-around-comment": [2, {           // enforce newlines around comments
        //    "beforeBlockComment": true,
        //    "beforeLineComment": true
        // }],
        "linebreak-style": [2, "unix"],         // prevent mixing of CRLF and LF line breaks
        "max-nested-callbacks": [2, 3],         // enforce max number of nested callbacks
        "new-cap": 2,                           // enforce capital letter for constructors
        "new-parens": 2,                        // prevent no parentheses on a constructor with no params
        "newline-after-var": 2,                 // enforce newline after variable declaration
        "no-array-constructor": 2,              // prevent use of new Array
        "no-continue": 2,                       // prevent use of continue statements
        "no-inline-comments": 2,                // prevent inline comments
        "no-lonely-if": 2,                      // prevent if statement within else block
        "no-mixed-spaces-and-tabs": 2,          // prevent tabs and spaces
        "no-multiple-empty-lines": 2,           // prevent multiple newlines
        "no-nested-ternary": 2,                 // prevent nested ternaries - only one allowed
        "no-new-object": 2,                     // prevent new Object
        "no-spaced-func": 2,                    // prevent space between function alias and parentheses
        "no-ternary": 0,                        // prevent use of ternary operators
        "no-trailing-spaces": 2,                // prevent use of trailing spaces on a line
        // "no-dangling-underscores": 2,           // prevent use of underscores at the end of variable names
        "no-unneeded-ternary": 2,               // prevent use of booleans in a conditional expression
        "no-wrap-func": 2,                      // prevent wrapping of all non-iife functions
        // "object-curly-spacing": 2,              // enforce spacing inside object braces
        "one-var": 0,                           // enforce single var statement
        "operator-assignment": 2,               // enforce operator assignment where possible
        "operator-linebreak": [2, "after"],     // enforce linebreaks before of after operators
        "padded-blocks": [2, "never"],          // enforce linebreaks within blocks
        "quote-props": 0,                       // enforce object literals to put keys in quotes
        "quotes": [2, "single"],                // enforce use of single quotes
        "semi-spacing": 0,                      // enforce use of space before and after semi-colons
        "semi": [2, "always"],                  // enforce use of semi-colons
        "sort-vars": [2, {                      // enforce variable sorting alphabetically
            "ignoreCase": true
        }],
        "space-after-keywords": [2, "always"],  // enforce space after keyword i.e. if () vs if()
        "space-before-blocks": [2, "always"],   // enforce space before opening brace i.e. if () {}
        "space-before-function-paren": [2, "always"],     // enforce function ()
        "space-in-brackets": [0, {              // enforce spacing within brackets
            "singleValue": false,
            "objectsInArrays": false,
            "arraysInArrays": false,
            "arraysInObjects": false,
            "objectsInObjects": false,
            "propertyName": false
        }],
        "space-in-parens": [2, "never"],        // enforce spacing within parentheses
        "space-infix-ops": 2,                   // enforce spacing around operators i.e. a + b
        "space-return-throw-case": 2,           // enforce a space after return, throw and case
        "space-unary-ops": [2, {                // enforce spacing for typeof, delete, etc
            "words": true,
            "nonwords": false
        }],
        "spaced-line-comment": 2,               // enforce a space at the beginning of a single-line comment
        "wrap-regex": 0,                        // enforce a regex being wrapped in parentheses


        // es6 section
        "generator-star-spacing": [2, "before"],    // enforce spacing around generator * syntax
        "no-var": 2,                            // prevent use of var over let and const
        "object-shorthand": [2, "always"],      // enforce use of object notation shorthand
    }
}
