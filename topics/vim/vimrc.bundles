""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""" PLUGINS """"""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Try to be nice on windows
if has('win32') || has('win64')
  set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

  if has("multi_byte")
    set termencoding=cp850
    set encoding=utf-8
    setglobal fileencoding=utf-8
    set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
  endif
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

if has('vim_starting')
  set rtp+=$HOME/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'


  " General support
  let g:make = 'gmake'
  if system('uname -o') =~ '^GNU/'
    let g:make = 'make'
  endif
  NeoBundle 'Shougo/vimproc.vim', {
  \ 'build' : {
  \     'windows' : 'tools\\update-dll-mingw',
  \     'cygwin' : 'make -f make_cygwin.mak',
  \     'mac' : 'make -f make_mac.mak',
  \     'linux' : 'make',
  \     'unix' : 'gmake',
  \    },
  \ }
  NeoBundle 'MarcWeber/vim-addon-mw-utils'
  NeoBundle 'embear/vim-localvimrc'
  NeoBundle 'tpope/vim-vinegar'

  " Writing/Authoring Tools
  NeoBundle 'reedes/vim-colors-pencil', {
        \ 'depends' : 'reedes/vim-pencil' }
  NeoBundleLazy 'junegunn/goyo.vim', {
        \ 'depends' : 'junegunn/limelight.vim' }
  NeoBundleLazy 'mattly/vim-markdown-enhancements', {
        \ 'depends' : 'tpope/vim-markdown' }
  NeoBundleLazy 'reedes/vim-lexical'
  NeoBundleLazy 'reedes/vim-litecorrect'
  NeoBundleLazy 'reedes/vim-wordy'
  NeoBundleLazy 'reedes/vim-wheel'
  NeoBundleLazy 'reedes/vim-thematic'

  augroup writing
    au!
    au FileType ft,markdown,txt NeoBundleSource [
          \ limelight.vim,
          \ goyo.vim,
          \ vim-lexical,
          \ vim-litecorrect,
          \ vim-wordy,
          \ vim-wheel,
          \ vim-thematic ]
    au FileType ft,markdown NeoBundleSource [
          \ vim-markdown,
          \ vim-markdown-enhancements ]
  augroup END

  " Development Tools
  NeoBundle 'tpope/vim-abolish', {
        \ 'depends' : 'tpope/vim-repeat' }
  NeoBundle 'rking/ag.vim'
  NeoBundle 'tpope/vim-commentary', {
        \ 'depends' : 'tpope/vim-repeat' }
  NeoBundle 'mattn/emmet-vim'
  NeoBundle 'tpope/vim-endwise'
  NeoBundle 'tpope/vim-eunuch'
  NeoBundle 'tpope/vim-fugitive'
  " NeoBundle 'junegunn/fzf'
  NeoBundle 'george-b/vim-fzf'
  NeoBundle 'mattn/gist-vim'
  NeoBundle 'sjl/gundo.vim'
  NeoBundle 'terryma/vim-multiple-cursors'
  NeoBundle 'tpope/vim-projectionist', {
        \ 'depends' : 'tpope/vim-haystack' }
  NeoBundle 'tomtom/quickfixsigns_vim'
  NeoBundle 'tpope/vim-ragtag'
  NeoBundle 'tpope/vim-rsi'
  NeoBundle 'tpope/vim-sleuth'
  NeoBundle 'AndrewRadev/sideways.vim'
  NeoBundle 'tpope/vim-speeddating', {
        \ 'depends' : 'tpope/vim-repeat' }
  NeoBundle 'tpope/vim-surround', {
        \ 'depends' : 'tpope/vim-repeat' }
  NeoBundle 'scrooloose/syntastic'
  NeoBundle 'mbbill/undotree'
  NeoBundle 'tpope/vim-unimpaired', {
        \ 'depends' : 'tpope/vim-repeat' }

  " Lang-specific
  NeoBundleLazy 'burnettk/vim-angular', {
        \ 'depends' : 'pangloss/vim-javascript' }
  NeoBundleLazy 'kchmck/vim-coffee-script', {
        \ 'depends' : 'pangloss/vim-javascript' }
  NeoBundleLazy 'othree/html5.vim'
  NeoBundleLazy 'othree/javascript-libraries-syntax.vim', {
        \ 'depends' : 'pangloss/vim-javascript' }
  NeoBundleLazy 'elzr/vim-json', {
        \ 'depends' : 'pangloss/vim-javascript' }
  NeoBundleLazy 'mxw/vim-jsx', {
        \ 'depends' : 'pangloss/vim-javascript' }
  NeoBundleLazy 'moll/vim-node', {
        \ 'depends' : 'pangloss/vim-javascript' }
  NeoBundleLazy 'leafgarland/typescript-vim', {
        \ 'depends' : 'pangloss/vim-javascript' }
  NeoBundleLazy 'groenewege/vim-less', {
        \ 'depends' : 'hail2u/vim-css3-syntax' }
  NeoBundleLazy 'cakebaker/scss-syntax.vim', {
        \ 'depends' : 'hail2u/vim-css3-syntax' }
  NeoBundleLazy 'fatih/vim-go'
  NeoBundleLazy 'digitaltoad/vim-jade'
  NeoBundleLazy 'rust-lang/rust.vim'
  NeoBundleLazy 'wavded/vim-stylus'

  augroup syntaxes
    au!
    au FileType coffee NeoBundleSource vim-coffee-script
    au FileType go NeoBundleSource vim-go
    au FileType html NeoBundleSource html5.vim
    au FileType jade NeoBundleSource vim-jade
    au FileType javascript NeoBundleSource [
          \ vim-javascript,
          \ vim-node,
          \ javascript-libraries-syntax.vim ]
    au FileType json NeoBundleSource [
          \ vim-javascript,
          \ vim-json ]
    au FileType jsx NeoBundleSource [
          \ vim-javascript,
          \ vim-jsx ]
    au FileType less NeoBundleSource vim-less
    au FileType rust NeoBundleSource rust.vim
    au FileType stylus NeoBundleSource vim-stylus
    au FileType typescript NeoBundleSource typescript-vim
  augroup END

  " Styling
  NeoBundle 'bling/vim-airline'


call neobundle#end()

" TODO: find better way to do this via NeoBundle
set rtp+=~/.fzf

" Required
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""" BUNDLE CONFIGS """"""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Airline
let g:airline_theme = 'pencil'
let g:airline_powerline_fonts=1

" " Ctrl-P
" if WINDOWS()
"   let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'
" elseif executable('ag')
"   let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
" elseif executable('ack')
"   let s:ctrlp_fallback = 'ack %s --nocolor -f'
" else
"   let s:ctrlp_fallback = 'find %s -type f'
" endif
" let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_custom_ignore = { 'dir':  '\.git$\|\.hg$\|\.svn$', 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
" let g:ctrlp_user_command = { 'types': { 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'], 2: ['.hg', 'hg --cwd %s locate -I .'], }, 'fallback': s:ctrlp_fallback }

" FZF
let g:fzf_tmux_height = 10

" Surround
augroup surround_customizing
  " FileType-dependent mapping of "-" (ASCII 45) as a replacement string
  au FileType php let b:surround_45 = "<?php \r ?>"
augroup END

" Emmet
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_python_checkers=['flake8', 'pylint']
let g:syntastic_html_tidy_exec = 'tidy5'

" Pencil / Writing Controls
let g:pencil#wrapModeDefault = 'soft'
let g:pencil#textwidth = 74
let g:pencil#joinspaces = 0
let g:pencil#cursorwrap = 1
let g:pencil#conceallevel = 3
let g:pencil#concealcursor = 'c'
let g:airline_section_x = '%{PencilMode()}'
let g:pencil#softDetectSample = 20
let g:pencil#softDetectThreshold = 130

" Local vimrc loading
let g:localvimrc_sandbox=0
let g:localvimrc_ask=0

augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
                            \ | call lexical#init()
                            \ | call litecorrect#init()
                            \ | setl spell spl=en_us fdl=4 noru nonu nornu
                            \ | setl fdo+=search
  autocmd Filetype git,gitsendemail,*commit*,*COMMIT*
                            \   call pencil#init({'wrap': 'hard', 'textwidth': 72})
                            \ | call litecorrect#init()
                            \ | setl spell spl=en_us et sw=2 ts=2 noai
  autocmd Filetype mail         call pencil#init({'wrap': 'hard', 'textwidth': 60})
                            \ | call litecorrect#init()
                            \ | setl spell spl=en_us et sw=2 ts=2 noai nonu nornu
  autocmd Filetype html,xml     call pencil#init({'wrap': 'soft'})
                            \ | call litecorrect#init()
                            \ | setl spell spl=en_us et sw=2 ts=2
augroup END

let g:limelight_default_coefficient = 0.5

" Goyo
function! s:goyo_enter()
  silent !tmux set status off
  set noshowmode
  set noshowcmd
  set scrolloff=999
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
  Limelight
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  set showmode
  set showcmd
  set scrolloff=5
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
  Limelight!
endfunction

autocmd! User GoyoEnter
autocmd! User GoyoLeave
autocmd  User GoyoEnter nested call <SID>goyo_enter()
autocmd  User GoyoLeave nested call <SID>goyo_leave()

" vim: set sw=2 ts=2 sts=2 et tw=78 nospell:
